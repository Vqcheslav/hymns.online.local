{% extends 'app.html.twig' %}

{% block description %}–ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –ï–•–≤–î–∞, –ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è 3400, –°–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω –î–µ–º—è–Ω—Å–∫ –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–±–æ—Ä–Ω–∏–∫. –ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–Ω–∏–∫–∞–º{% endblock %}

{% block icon %}
    <link rel="icon" href="{{ absolute_url(asset('img/hymns/favicon.png')) }}" type="image/png">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="–°–±–æ—Ä–Ω–∏–∫–∏ –ì–∏–º–Ω–æ–≤">
    <meta property="og:url" content="{{ url('hymns') }}">
    <meta property="og:locale" content="ru">
    <meta property="og:title" content="–°–±–æ—Ä–Ω–∏–∫–∏ –ì–∏–º–Ω–æ–≤">
    <meta property="og:description"
          content="–ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –ï–•–≤–î–∞, –ü–µ—Å–Ω—å –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è 3400, –°–±–æ—Ä–Ω–∏–∫ –ø–µ—Å–µ–Ω –î–µ–º—è–Ω—Å–∫ –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–±–æ—Ä–Ω–∏–∫. –ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–Ω–∏–∫–∞–º">
    <meta property="og:image" content="{{ absolute_url(asset('img/hymns/favicon.png')) }}">
    <meta property="og:image:secure_url" content="{{ absolute_url(asset('img/hymns/favicon.png')) }}">
    <meta property="og:image:width" content="400">
    <meta property="og:image:height" content="400">
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:alt" content="–°–±–æ—Ä–Ω–∏–∫–∏ –ì–∏–º–Ω–æ–≤">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="{{ absolute_url(asset('img/hymns/favicon.png')) }}">
{% endblock %}

{% block title %}–ì–∏–º–Ω—ã{% endblock %}

{% block styles %}
    <link href="{{ asset('css/hymns/hymns.css?version=1.2') }}" rel="stylesheet">
{% endblock %}

{% block main %}
    <div id="hymnsDiv" class="container mt-5 mb-3">
        <form id="searchHymnsForm" class="pt-5">
            <h1 class="h1">–°–±–æ—Ä–Ω–∏–∫–∏ –≥–∏–º–Ω–æ–≤</h1>
            <div class="form-check form-switch">
                <input id="noSleepCheckbox" class="form-check-input" type="checkbox" role="switch">
                <label class="form-check-label" for="noSleepCheckbox">–ù–µ –≤—ã–∫–ª—é—á–∞—Ç—å —ç–∫—Ä–∞–Ω</label>
            </div>
            <label class="mt-5 form-label" for="searchHymnsInput">–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Å–±–æ—Ä–Ω–∏–∫–∞–º</label>
            <div class="input-group border border-secondary rounded-3">
                <input
                    id="searchHymnsInput"
                    class="form-control border-0"
                    type="text"
                    aria-label="Search"
                    aria-describedby="searchHymnsLabel"
                    placeholder="üîé –ù–æ–º–µ—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç"
                    autocomplete="off"
                    spellcheck="true"
                    required
                >
                <button
                    class="btn-close btn"
                    style="height: auto; padding: 0 10px;"
                    type="reset"
                    aria-label="Reset form"
                ></button>
                <button class="btn btn-primary" id="searchHymnsButton">–ù–∞–π—Ç–∏</button>
            </div>
            <div class="btn-group mt-1 rounded-3" role="group" aria-label="Group For Input">
                <button type="button" class="btn btn-outline-secondary tapToInputButton"
                        data-value="—ó" data-input-selector="#searchHymnsInput">—ó
                </button>
                <button type="button" class="btn btn-outline-secondary tapToInputButton"
                        data-value="—î" data-input-selector="#searchHymnsInput">—î
                </button>
                <button type="button" class="btn btn-outline-secondary tapToInputButton"
                        data-value="—ñ" data-input-selector="#searchHymnsInput">—ñ
                </button>
                <button type="button" class="btn btn-outline-secondary tapToInputButton"
                        data-value="'" data-input-selector="#searchHymnsInput">'
                </button>
            </div>
        </form>
        <div id="searchDiv" class="d-none py-2">
            <p id="searchResultsLabel">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            <div id="searchResults" class="d-none d-grid gap-2"></div>
        </div>
        <div id="booksCollection" class="mt-5 py-2 d-flex flex-wrap gap-2">
            <nav aria-label="Book Collection">
                <button class="btn btn-success dropdown-toggle" type="button" data-bs-toggle="dropdown"
                        aria-expanded="false">
                    {% for book in books %}
                        {% if book.book_id is same as(bookId) %}
                            {{ book.title }}
                        {% endif %}
                    {% endfor %}
                </button>
                <ul class="dropdown-menu overflow-auto bg-body-tertiary">
                    {% for book in books %}
                        <li>
                            <a
                                class="dropdown-item"
                                href="{{ path('hymns', {'bookId': book.book_id}) }}"
                            >{{ book.title }}</a>
                        </li>
                    {% endfor %}
                </ul>
            </nav>
        </div>
        {% include 'hymns/pagination.html.twig' %}
        <div id="hymnsCollection" class="my-5 d-grid gap-2">
            {% if hymns|length is same as(0) %}
                <div class="fs-5 mh-100" style="height: 100vh;">
                    –ù–∏—á–µ–≥–æ –Ω–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é
                </div>
            {% endif %}

            {% for hymn in hymns %}
                <p data-hymn-id="{{ hymn.hymn_id }}" class="open-modal-hymn m-0 fs-5 cursor-pointer">
                    <span class="fw-bold">{{ hymn.number }}</span>
                    <span class="ms-3">{{ hymn.title }}‚Ä¶</span>
                </p>
            {% endfor %}
        </div>
        {% include 'hymns/pagination.html.twig' %}
    </div>
    <div class="modal fade" id="modalWindow" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-fullscreen-lg-down">
            <div class="modal-content">
                <div class="modal-header">
                    <div>
                        <h1 id="modalWindowTitle" class="modal-title fs-5 fw-bold text-overflow-ellipsis">
                            –ó–∞–≥—Ä—É–∑–∫–∞...
                        </h1>
                        <div class="d-flex align-items-center flex-wrap">
                            <div id="modalWindowSubtitle2" class="m-0 small pe-1"></div>
                            <div id="modalWindowSubtitle" class="m-0 small"></div>
                        </div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body new-scrollbar">
                    <div class="mb-4 d-flex align-items-center justify-content-between">
                        <a
                            id="modalLinkForSendNotification"
                            class="link-secondary link-opacity-75"
                            href="mailto:vqcheslav.official@gmail.com"
                        >–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ</a>
                        <div class="btn-group btn-group-sm" role="group" aria-label="Font button group">
                            <button
                                id="decreaseFontSizeInModalBody"
                                class="btn btn-outline-secondary"
                                title="–£–º–µ–Ω—å—à–∏—Ç—å —à—Ä–∏—Ñ—Ç"
                            >-Aa
                            </button>
                            <button
                                id="copyHymnTextButton"
                                class="btn btn-outline-secondary"
                                title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
                            >
                                <svg class="bi">
                                    <use href="#clipboard"></use>
                                </svg>
                            </button>
                            <button
                                id="increaseFontSizeInModalBody"
                                class="btn btn-outline-secondary"
                                title="–£–≤–µ–ª–∏—á–∏—Ç—å —à—Ä–∏—Ñ—Ç"
                            >+Aa
                            </button>
                        </div>
                    </div>
                    <div id="modalWindowBody" style="font-size: 18px">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/mark.min.js"></script>
    <script src="{{ asset('js/vendor/nosleep.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const KEY_OF_MODAL_BODY_FONT_SIZE = 'modal_window_body_font_size'

            let lastSearchString = ''
            let modalBody = document.querySelector('#modalWindowBody')
            modalBody.style.fontSize = localStorage.getItem(KEY_OF_MODAL_BODY_FONT_SIZE) || '18px'
            let searchInput = document.querySelector('#searchHymnsInput')
            let searchHymnsButton = document.querySelector('#searchHymnsButton')
            let searchDiv = document.querySelector('#searchDiv')
            let searchResultsLabel = document.querySelector('#searchResultsLabel')
            let searchResultsDiv = document.querySelector('#searchResults')

            let noSleep = new NoSleep()
            let noSleepCheckbox = document.querySelector('#noSleepCheckbox')

            noSleepCheckbox.addEventListener('change', function () {
                switchNoSleep( ! this.hasAttribute('checked'))
            }, false)

            function switchNoSleep (on = true) {
                if (on) {
                    noSleep.enable()
                    noSleepCheckbox.setAttribute('checked', 'checked')
                    noSleepCheckbox.checked = true
                } else {
                    noSleep.disable()
                    noSleepCheckbox.removeAttribute('checked')
                    noSleepCheckbox.checked = false
                }
            }

            async function searchHymns () {
                let searchString = searchInput.value.trim()

                if (searchString === '') {
                    lastSearchString = ''
                    searchDiv.classList.add('d-none')

                    return
                }

                if (searchString === lastSearchString) {
                    return
                }

                let removeLoaderFunction = setLoaderAndGetRemovingFunction(searchHymnsButton)
                searchResultsLabel.innerText = '–ó–∞–≥—Ä—É–∑–∫–∞...'
                searchResultsDiv.innerHTML = ''
                searchDiv.classList.remove('d-none')

                let response = await fetch('/api/v1/hymns/search/' + searchString)
                let responseJson = await response.json()

                if ( ! responseJson?.ok) {
                    Toast.showMessageFromResponse(response, responseJson)
                    searchResultsLabel.innerText = '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
                    removeLoaderFunction('–ù–∞–π—Ç–∏')

                    return
                }

                let data = responseJson?.data || []
                let htmlContent = ''

                for (let hymn of data) {
                    let verse = hymn.verses[0]
                    let lyrics = ''

                    if (verse.is_chorus) {
                        lyrics += '–ü—Ä–∏–ø–µ–≤: '
                    } else {
                        lyrics += verse.position + '. '
                    }

                    lyrics += verse.lyrics
                    htmlContent += `
                        <div data-hymn-id="${hymn.hymn_id}" class="open-modal-hymn-from-search m-0 p-0 cursor-pointer border-bottom">
                            <p class="m-0 small">${hymn.book_title}</p>
                            <p class="m-0 mb-1 fw-bold text-overflow-ellipsis">
                                <span class="search-hymn-lyrics">${hymn.number}</span>: ${hymn.title}‚Ä¶
                            </p>
                            <p class="m-0 pb-1 search-hymn-lyrics">${lyrics}</p>
                        </div>
                    `
                }

                searchResultsDiv.classList.remove('d-none')
                searchResultsLabel.innerText = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ' + (htmlContent ? '' : '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
                searchResultsDiv.innerHTML = htmlContent
                let markJs = new Mark(document.querySelectorAll('.search-hymn-lyrics'))
                markJs.mark(searchString)

                document.querySelectorAll('.open-modal-hymn-from-search').forEach(function (element) {
                    element.addEventListener('click', getListenerForOpenModal(element))
                })

                lastSearchString = searchString
                removeLoaderFunction('–ù–∞–π—Ç–∏')
            }

            let debouncedSearch = debounce(searchHymns, 1000)
            searchInput.addEventListener('input', debouncedSearch)
            document.querySelector('#searchHymnsForm').addEventListener('submit', async function (e) {
                e.preventDefault()
                await searchHymns()
            })
            document.querySelector('#searchHymnsForm').addEventListener('reset', async function (e) {
                e.preventDefault()
                searchInput.value = ''
                await searchHymns()
            })

            document.querySelectorAll('.tapToInputButton').forEach(function (element) {
                element.addEventListener('click', function () {
                    let input = document.querySelector(this.dataset.inputSelector)
                    input.setRangeText(this.dataset.value, input.selectionStart, input.selectionEnd, 'end')
                    input.focus()
                })
            })

            function getListenerForOpenModal (element) {
                return async function () {
                    let modalTitle = document.querySelector('#modalWindowTitle')
                    let modalSubtitle = document.querySelector('#modalWindowSubtitle')
                    let modalSubtitle2 = document.querySelector('#modalWindowSubtitle2')
                    let modalLink = document.querySelector('#modalLinkForSendNotification')

                    switchNoSleep(true)

                    modalTitle.innerText = '–ó–∞–≥—Ä—É–∑–∫–∞...'
                    modalSubtitle.innerText = ''
                    modalSubtitle2.innerText = ''
                    modalBody.innerText = '–ó–∞–≥—Ä—É–∑–∫–∞...'

                    let modalWindow = new bootstrap.Modal('#modalWindow')
                    modalWindow.show()

                    let response = await fetch('/api/v1/hymns/' + element.dataset.hymnId)
                    let responseJson = await response.json()

                    if ( ! responseJson?.ok) {
                        Toast.showMessageFromResponse(response, responseJson)
                        modalWindow.close()

                        return
                    }

                    let hymn = responseJson.data
                    let title = hymn.number + ': ' + hymn.title + '‚Ä¶'
                    let lyrics = ''

                    for (let verse of responseJson.data.verses) {
                        lyrics += '<p class="mb-4">'

                        if (verse.is_chorus) {
                            lyrics += '<i>–ü—Ä–∏–ø–µ–≤:</i> '
                        } else {
                            lyrics += verse.position + '. '
                        }

                        lyrics += verse.lyrics.replaceAll('\n', '<br>') + '</p>'
                    }

                    modalTitle.innerText = title
                    modalSubtitle.innerText = ':: ' + hymn.category
                    modalSubtitle2.innerText = hymn.book_title
                    modalBody.innerHTML = lyrics
                    modalLink.href = `mailto:vqcheslav.official@gmail.com?subject=–û—à–∏–±–∫–∞%20–≤%20—Ç–µ–∫—Å—Ç–µ%20–≥–∏–º–Ω–∞&body=–ù–æ–º–µ—Ä%20–≥–∏–º–Ω–∞%3A%20${title}%0A–°–±–æ—Ä–Ω–∏–∫%3A%20${hymn.book_title}%0A–ö—É–ø–ª–µ—Ç%3A%20%0A–û–ø–∏—Å–∞–Ω–∏–µ%3A%20%0A`
                }
            }

            document.querySelectorAll('.open-modal-hymn').forEach(function (element) {
                element.addEventListener('click', getListenerForOpenModal(element))
            })

            function changeFontSizeInModalBody (isIncrease = true) {
                let step = 2
                let size = getComputedStyle(modalBody).getPropertyValue('font-size')
                size = Number(size.replace('px', ''))

                if (isIncrease) {
                    if (size >= 36) {
                        return
                    }

                    size += step
                } else {
                    if (size <= 14) {
                        return
                    }

                    size -= step
                }

                size = size + 'px'
                localStorage.setItem(KEY_OF_MODAL_BODY_FONT_SIZE, size)
                modalBody.style.fontSize = size
            }

            document.querySelector('#decreaseFontSizeInModalBody').addEventListener('click', function () {
                changeFontSizeInModalBody(false)
            })

            document.querySelector('#increaseFontSizeInModalBody').addEventListener('click', function () {
                changeFontSizeInModalBody(true)
            })

            let copyHymnTextButton = document.querySelector('#copyHymnTextButton')

            copyHymnTextButton.addEventListener('click', function () {
                let modalHeaderText = document.querySelector('#modalWindow .modal-header div').innerText
                let text = modalHeaderText + '\n\n\n' + modalBody.innerText

                copyText(text.trim())

                copyHymnTextButton.classList.add('btn-success')
                setTimeout(function () {
                    copyHymnTextButton.classList.remove('btn-success')
                }, 1500)
            })

            function debounce (callee, timeoutMs) {
                return function perform (...args) {
                    let previousCall = this.lastCall

                    this.lastCall = Date.now()

                    if (previousCall && this.lastCall - previousCall <= timeoutMs) {
                        clearTimeout(this.lastCallTimer)
                    }

                    this.lastCallTimer = setTimeout(() => callee(...args), timeoutMs)
                }
            }
        })
    </script>
{% endblock %}
